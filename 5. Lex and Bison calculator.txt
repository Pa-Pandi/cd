Lex

%{
#include <stdio.h>
#include "cal.tab.h"
%}

%%
[0-9]+                  { yylval = atoi(yytext); return NUMBER; }
[-+*/()]                { return yytext[0]; }
\n                      { return '\n'; }
[ \t]                   // Ignore whitespace
.                       { return yytext[0]; }
%%

int yywrap() {
    return 1;
}

Bison

%{
#include <stdio.h>
%}

%token NUMBER
%left '+' '-'
%left '*' '/'

%%
input: /* empty */
     | input line
     ;

line: '\n'
    | exp '\n' { printf("%d\n", $1); }
    ;

exp: exp '+' exp { $$ = $1 + $3; }
   | exp '-' exp { $$ = $1 - $3; }
   | exp '*' exp { $$ = $1 * $3; }
   | exp '/' exp { $$ = $1 / $3; }
   | '(' exp ')'  { $$ = $2; }
   | NUMBER { $$ = $1; }
   ;

%%

int main() {
    yyparse();
    return 0;
}

int yyerror(char *s) {
    fprintf(stderr, "error: %s\n", s);
    return 0;
}

~$ flex scan.l
~$ bison cal.y
~$ gcc lex.yy.c cal.tab.c -o calculator -lfl
